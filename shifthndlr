import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

public class ShiftHandler extends DefaultHandler implements ErrorHandler{

	 int         flags;
	 boolean AID = false;
	 PrintStream out;
	    // bit mask values for flags
	    public static final int ERR_PRINT = 1;
	    public static final int ERR_IGNORE = 2;
	    public static final int WARN_PRINT = 4;
	    public static final int FATAL_PRINT = 8;
	    public static final int FATAL_IGNORE = 16;

	   
	    ShiftHandler (int flags) { this.flags = flags; }

	    public void error (SAXParseException e)
	    throws SAXParseException
	    {
		if ((flags & ERR_PRINT) != 0)
		    System.err.print (printParseException ("Error", e));
			out.println(printParseException ("Error", e));
		if ((flags & ERR_IGNORE) == 0)
		    throw e;
	    }

	    public void fatalError (SAXParseException e)
	    throws SAXParseException
	    {
		if ((flags & FATAL_PRINT) != 0)
		    System.err.print (printParseException ("FATAL", e));
			out.println(printParseException ("FATAL", e));
		if ((flags & FATAL_IGNORE) == 0)
		    throw e;
	    }

	    public void warning (SAXParseException e)
	    throws SAXParseException
	    {
		if ((flags & WARN_PRINT) != 0)
		    System.err.print (printParseException ("Warning", e));
		out.println(printParseException ("Warning", e));
		// always ignored
	    }

	    // printParseException() method (above) is part of this class
	    static private String printParseException (
	    	    String              label,
	    	    SAXParseException   e
	    	) {
	    	    StringBuffer        buf = new StringBuffer ();
	    	    int                 temp;

	    	    buf.append ("** ");
	    	    buf.append (label);
	    	    buf.append (": ");
	    	    buf.append (e.getMessage ());
	    	    buf.append ('\n');
	    	    // most such exceptions include the (absolute) URI for the text
	    	    if (e.getSystemId () != null) {
	    	        buf.append ("   URI:  ");
	    	        buf.append (e.getSystemId ());
	    	        buf.append ('\n');
	    	    }
	    	    // many include approximate line and column numbers
	    	    if ((temp = e.getLineNumber ()) != -1) {
	    	        buf.append ("   line: ");
	    	        buf.append (temp);
	    	        buf.append ('\n');
	    	    }
	    	    if ((temp = e.getColumnNumber ()) != -1) {
	    	        buf.append ("   char: ");
	    	        buf.append (temp);
	    	        buf.append ('\n');
	    	    }
	    	    // public ID might be available, but is seldom useful

	    	    return buf.toString ();
	    	}
	List<Footer> myFooters;
	List<Header> myHeaders;
	List<App> myApps;

	private String tempVal;
	private String tempValu;
	private String tempValue;
	private String tempUom;

	// to maintain context
	private Footer tempFooter;
	private Header tempHeader;
	private App tempApp;
	

	public ShiftHandler() {
		flags = ~0; 
		myFooters = new ArrayList<Footer>();
		myHeaders = new ArrayList<Header>();
		myApps = new ArrayList<App>();
	}

	public void runExample() {
		parseDocument();
		//printData();
		saveRecord(myApps, myHeaders, myFooters);
	}
	
	private void parseDocument() {

		// get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();
		
		try {

			// get a new instance of parser
			SAXParser sp = spf.newSAXParser();
			File folder = new File("D:\\Mamta\\XML");
		
			File[] listOfFiles = folder.listFiles();
			
			for (File list : listOfFiles) {
			//YourClassConstructor(list);
				sp.parse(list,this);
			System.out.println(list.getName());
			
			System.out.println("App ID : " +tempApp.getId());
			
			//System.out.println("App ID : " +tempApp.getId());
			}
			
			
			File infoFile=new File("D:\\SidhiVinayak\\3-12-2015\\TP\\src\\Error.log");

	    	FileOutputStream fout=new FileOutputStream(infoFile); // infoFile---> File whre u wanna write logs
	    	//final PrintStream out=new PrintStream(fout);
	    	out=new PrintStream(fout);
	    	out.println("hello");
	    	out.println(App.class.getName());
	    //	out.println(App.class.getTypeParameters().equals(myApps));
	    	//out.println(myApps.add(tempApp.getaPId()));
	    	
	    	for (File list : listOfFiles) {
	    		out.println(list.getName());
	    		out.println(tempApp.getId());
	    		for (App li : myApps) {
		    	   	out.println(li.getId());
		    	   	 	
	    	}
	    	}
	    	
	    //	out.println(printFields(myApps));
			
		/*	File f = new File("D:\\Mamta\\XML\\ACS.xml",true);
			PrintWriter pout = new PrintWriter(f);
			pout.println("yhehhefhef0");*/
		//	File f = new File("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\",true);
		//	PrintWriter pout = new PrintWriter(f);
			//pout.println("yhehhefhef0");
			// parse the file and also register this class for call backs
			// sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACS.xml", this);
	//sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACES.xml",this);
			//sp.parse("D:\\SidhiVinayak\\3-12-2015\\TP\\src\\acesALLTagAndAttributeRead.xml",this);
			//sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACES_MAHLEOriginal_Filters.xml", this);
		} catch (SAXException se) {
			se.printStackTrace();
			out.println(se);
		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
			out.println(pce);
		} catch (IOException ie) {
			ie.printStackTrace();
			out.println(ie);
		}
	}

	/**
	 * Iterate through the list and print the contents
	 */
	private void printData() {

		System.out.println("No of RecordCount '" + myFooters.size() + "'.");
		Iterator<Footer> it = myFooters.iterator();
		while (it.hasNext()) {
			System.out.println(it.next().toString());
		}

		System.out.println("No of Headers '" + myHeaders.size() + "'.");
		Iterator<Header> itr = myHeaders.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next().toString());
		}

		System.out.println("No of Apps '" + myApps.size() + "'.");
		Iterator<App> itrtr = myApps.iterator();
		while (itrtr.hasNext()) {
			System.out.println(itrtr.next().toString());
		}

	}

	// Event Handlers
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		// reset
		tempVal = "";
		

		if (qName.equalsIgnoreCase("Footer")) {
			// create a new instance of employee
			tempFooter = new Footer();
			// tempFooter.setType(attributes.getValue("type"));
		}
		if (qName.equalsIgnoreCase("Header")) {
			// create a new instance of employee
			tempHeader = new Header();
			// tempHeader.setType(attributes.getValue("type"));
		}
		if (qName.equalsIgnoreCase("App")) {
			// create a new instance of employee
			tempValu = "";
			tempValue = "";
			tempUom = "";
			tempApp = new App();
			tempApp.setId(Long.parseLong(attributes.getValue("id")));
			tempApp.setAction(attributes.getValue("action"));
			tempApp.setValidate(attributes.getValue("validate"));
			tempApp.setRef(attributes.getValue("ref"));
			//tempApp.setVersion(attributes.getValue("version"));
			//tempApp.setVersion(attributes.getValue("version"));
		
		}
		if (qName.equalsIgnoreCase("BaseVehicle")) {
			String id = attributes.getValue("id");
			tempApp.setBaseVehicleId(Long.parseLong(id));
		}
		if (qName.equalsIgnoreCase("EngineBase")) {
			tempApp.setEngineBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineDesignation")) {
			tempApp.setEngineDesignationId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliverySubType")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Note")) {
			String id = attributes.getValue("id");
			if (id != null) {
				tempApp.setNoteId(Long.parseLong(id));
			}
			String lang = attributes.getValue("lang");
			if (lang != null) {
				tempApp.setNoteLang(lang);
			}
		}
		if (qName.equalsIgnoreCase("Part")) {
			tempApp.setPartBrandAAIAId(attributes.getValue("BrandAAIAID"));
		}
		if (qName.equalsIgnoreCase("Aspiration")) {
			tempApp.setAspirationId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BedLength")) {
			tempApp.setBedLengthId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BedType")) {
			tempApp.setBedTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BodyNumDoors")) {
			tempApp.setBodyNumDoorsId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BodyType")) {
			tempApp.setBodyTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BrakeABS")) {
			tempApp.setBrakeABSId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BrakeSystem")) {
			tempApp.setBrakeSystemId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("CylinderHeadType")) {
			tempApp.setCylinderHeadTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("DriveType")) {
			tempApp.setDriveTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineMfr")) {
			tempApp.setEngineMfrId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineVersion")) {
			tempApp.setEngineVersionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineVIN")) {
			tempApp.setEngineVINId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FrontBrakeType")) {
			tempApp.setFrontBrakeTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FrontSpringType")) {
			tempApp.setFrontSpringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliverySubType")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliveryType")) {
			tempApp.setFuelDeliveryTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelSystemControlType")) {
			tempApp.setFuelSystemControlTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelSystemDesign")) {
			tempApp.setFuelSystemDesignId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelType")) {
			tempApp.setFuelTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("IgnitionSystemType")) {
			tempApp.setIgnitionSystemTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Make")) {
			tempApp.setMakeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("MfrBodyCode")) {
			tempApp.setMfrBodyCodeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Model")) {
			tempApp.setModelId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("PowerOutput")) {
			tempApp.setPowerOutputId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("RearBrakeType")) {
			tempApp.setRearBrakeTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("RearSpringType")) {
			tempApp.setRearSpringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Region")) {
			tempApp.setRegionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SteeringType")) {
			tempApp.setSteeringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SteeringSystem")) {
			tempApp.setSteeringSystemId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SubModel")) {
			tempApp.setSubModelId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransElecControlled")) {
			tempApp.setTransElecContolledId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionMfr")) {
			tempApp.setTransmissionMfrId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionMfrCode")) {
			tempApp.setTransmissionMfrCodeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionBase")) {
			tempApp.setTransmissionBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionControlType")) {
			tempApp.setTransmissionControlTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionNumSpeeds")) {
			tempApp.setTransmissionNumSpeedsId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionType")) {
			tempApp.setTransmissionTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("ValvesPerEngine")) {
			tempApp.setValvesPerEngineId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("VehicleType")) {
			tempApp.setVehicleTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("WheelBase")) {
			tempApp.setWheelBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Years")) {
			tempApp.setYearsFrom(attributes.getValue("from"));
			tempApp.setYearsTo(attributes.getValue("to"));
		}
		if (qName.equalsIgnoreCase("PartType")) {
			tempApp.setPartTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Qual")) {
			tempApp.setQualId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Param")) {
				String value = attributes.getValue("value");
				if (value != null) {
					tempApp.setqParamValue(value + "" + tempValue);
					tempValue = tempValue + "," + value;
				}
		
				String uom = attributes.getValue("uom");
				if (uom != null) {
					tempApp.setqParamUom(uom + "" + tempUom);
					tempUom = tempUom + "," + uom;
				}
				
				String altvalue = attributes.getValue("altvalue");
				if (altvalue != null) {
					tempApp.setqParamAltValue(altvalue);
				}
				String altuom = attributes.getValue("altuom");
				if (altuom != null) {
					tempApp.setqParamAltUom(altuom);
				}
		}
		if (qName.equalsIgnoreCase("Position")) {
			tempApp.setPositionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Asset")) {
			String action = attributes.getValue("action");
			if (action != null) {
				tempApp.setAssetAction(action);
			}
			String id = attributes.getValue("id");
			if (id != null) {
				tempApp.setAssetId(Long.parseLong(id));
			}
			tempApp.setAssetRef(attributes.getValue("ref"));
			tempApp.setAssetValidate(attributes.getValue("validate"));
		}
	}

	public void characters(char[] ch, int start, int length)
			throws SAXException {
		tempVal = new String(ch, start, length);
		
	}

	public void endElement(String uri, String localName, String qName)
			throws SAXException {

		if (qName.equalsIgnoreCase("Footer")) {
			// add it to the list
			myFooters.add(tempFooter);
		} else if (qName.equalsIgnoreCase("RecordCount")) {
			tempFooter.setRecordCount(Integer.parseInt(tempVal));
		}
		if (qName.equalsIgnoreCase("Header")) {
			// add it to the list
			myHeaders.add(tempHeader);
		} else if (qName.equalsIgnoreCase("Company")) {
			tempHeader.setCompany(tempVal);
		} else if (qName.equalsIgnoreCase("SenderName")) {
			tempHeader.setSenderName(tempVal);
		} else if (qName.equalsIgnoreCase("SenderPhone")) {
			tempHeader.setSenderPhone(tempVal);
		} else if (qName.equalsIgnoreCase("TransferDate")) {
			tempHeader.setTransferDate(tempVal);
		} else if (qName.equalsIgnoreCase("BrandAAIAID")) {
			tempHeader.setBrandAAIAID(tempVal);
		} else if (qName.equalsIgnoreCase("DocumentTitle")) {
			tempHeader.setDocumentTitle(tempVal);
		} else if (qName.equalsIgnoreCase("EffectiveDate")) {
			tempHeader.setTransferDate(tempVal);
		} else if (qName.equalsIgnoreCase("SubmissionType")) {
			tempHeader.setSubmissionType(tempVal);
		} else if (qName.equalsIgnoreCase("MapperCompany")) {
			tempHeader.setMapperCompany(tempVal);
		} else if (qName.equalsIgnoreCase("MapperContact")) {
			tempHeader.setMapperContact(tempVal);
		} else if (qName.equalsIgnoreCase("MapperPhone")) {
			tempHeader.setMapperPhone(tempVal);
		} else if (qName.equalsIgnoreCase("MapperEmail")) {
			tempHeader.setMapperEmail(tempVal);
		} else if (qName.equalsIgnoreCase("VcdbVersionDate")) {
			tempHeader.setVcdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("QdbVersionDate")) {
			tempHeader.setQdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("PcdbVersionDate")) {
			tempHeader.setPcdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("ApprovedFor")) {
			tempHeader.setApprovedFor(tempVal);
		} else if (qName.equalsIgnoreCase("DocFormNumber")) {
			tempHeader.setDocFormNumber(tempVal);
		} else if (qName.equalsIgnoreCase("MapperPhoneExt")) {
			tempHeader.setMapperPhoneExt(tempVal);
		} else if (qName.equalsIgnoreCase("SenderPhoneExt")) {
			tempHeader.setSenderPhoneExt(tempVal);
		}
		if (qName.equalsIgnoreCase("App")) {
			// add it to the list
			myApps.add(tempApp);
		} else if (qName.equalsIgnoreCase("id")) {
			tempApp.setId(Long.parseLong(tempVal));
			
		} else if (qName.equalsIgnoreCase("action")) {
			tempApp.setAction(tempVal);
		} else if (qName.equalsIgnoreCase("validate")) {
			tempApp.setValidate(tempVal);
		}else if (qName.equalsIgnoreCase("ref")) {
			tempApp.setRef(tempVal);
		}/* else if (qName.equalsIgnoreCase("version")) {
			tempApp.setVersion(tempVal);
		}*/
		else if (qName.equalsIgnoreCase("Note")) {
			tempApp.setNote(tempValu + " " + tempVal);
			tempValu = tempValu + tempVal;
		} else if (qName.equalsIgnoreCase("Note lang")) {
			tempApp.setNoteLang(tempVal);
		} else if (qName.equalsIgnoreCase("Qty")) {
			tempApp.setQty(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("PartType id")) {
			tempApp.setPartTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Part BrandAAIAID")) {
			tempApp.setPartBrandAAIAId(tempVal);
		} else if (qName.equalsIgnoreCase("Aspiration id")) {
			tempApp.setAspirationId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BedLength id")) {
			tempApp.setBedLengthId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BedType id")) {
			tempApp.setBedTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BodyNumDoors id")) {
			tempApp.setBodyNumDoorsId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BodyType id")) {
			tempApp.setBodyTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BrakeABS id")) {
			tempApp.setBrakeABSId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BrakeSystem id")) {
			tempApp.setBrakeSystemId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("CylinderHeadType id")) {
			tempApp.setCylinderHeadTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("DriveType id")) {
			tempApp.setDriveTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineMfr id")) {
			tempApp.setEngineMfrId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineVersion id")) {
			tempApp.setEngineVersionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineVIN id")) {
			tempApp.setEngineVINId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FrontBrakeType id")) {
			tempApp.setFrontBrakeTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FrontSpringType id")) {
			tempApp.setFrontSpringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelDeliveryType id")) {
			tempApp.setFuelDeliveryTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelSystemControlType id")) {
			tempApp.setFuelSystemControlTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelSystemDesign id")) {
			tempApp.setFuelSystemDesignId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelType id")) {
			tempApp.setFuelTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("IgnitionSystemType id")) {
			tempApp.setIgnitionSystemTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Make id")) {
			tempApp.setMakeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("MfrBodyCode id")) {
			tempApp.setMfrBodyCodeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Model id")) {
			tempApp.setModelId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("PowerOutput id")) {
			tempApp.setPowerOutputId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("RearBrakeType id")) {
			tempApp.setRearBrakeTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("RearSpringType id")) {
			tempApp.setRearSpringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Region id")) {
			tempApp.setRegionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SteeringType id")) {
			tempApp.setSteeringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SteeringSystem id")) {
			tempApp.setSteeringSystemId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SubModel id")) {
			tempApp.setSubModelId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransElecControlled id")) {
			tempApp.setTransElecContolledId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionMfr id")) {
			tempApp.setTransmissionMfrId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionMfrCode id")) {
			tempApp.setTransmissionMfrCodeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionBase id")) {
			tempApp.setTransmissionBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionControlType id")) {
			tempApp.setTransmissionControlTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionNumSpeeds id")) {
			tempApp.setTransmissionNumSpeedsId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionType id")) {
			tempApp.setTransmissionTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("ValvesPerEngine id")) {
			tempApp.setValvesPerEngineId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("VehicleType id")) {
			tempApp.setVehicleTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("WheelBase id")) {
			tempApp.setWheelBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("from")) {
			tempApp.setYearsFrom(tempVal);
		} else if (qName.equalsIgnoreCase("to")) {
			tempApp.setYearsTo(tempVal);
		} else if (qName.equalsIgnoreCase("Position id")) {
			tempApp.setPositionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Part")) {
			tempApp.setPart(tempVal);
		} else if (qName.equalsIgnoreCase("BaseVehicle id")) {
			tempApp.setBaseVehicleId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineBase id")) {
			tempApp.setEngineBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineDesignation id")) {
			tempApp.setEngineDesignationId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelDeliverySubType id")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Note id")) {
			tempApp.setNoteId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Note lang")) {
			tempApp.setNoteLang(tempVal);
		} else if (qName.equalsIgnoreCase("Qual id")) {
			tempApp.setQualId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("value")) {
			tempApp.setqParamValue(tempVal);
		} else if (qName.equalsIgnoreCase("uom")) {
			tempApp.setqParamUom(tempVal);
		} else if (qName.equalsIgnoreCase("text")) {
			tempApp.setqPText(tempVal);
		}else if (qName.equalsIgnoreCase("altvalue")) {
			tempApp.setqParamAltValue(tempVal);
		} else if (qName.equalsIgnoreCase("altuom")) {
			tempApp.setqParamAltUom(tempVal);
		} else if (qName.equalsIgnoreCase("AssetItemOrder")) {
			tempApp.setAssetItemOrder(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("AssetItemRef")) {
			tempApp.setAssetItemRef(tempVal);
		} else if (qName.equalsIgnoreCase("AssetItemName")) {
			tempApp.setAssetItemName(tempVal);
		} else if (qName.equalsIgnoreCase("DisplayOrder")) {
			tempApp.setDisplayOrder(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("MfrLabel")) {
			tempApp.setMfrLabel(tempVal);
		} else if (qName.equalsIgnoreCase("Company")) {
			tempHeader.setCompany(tempVal);
		}

		else if (qName.equalsIgnoreCase("action")) {
			tempApp.setAssetAction(tempVal);
		} else if (qName.equalsIgnoreCase("id")) {
			tempApp.setAssetId(Long.parseLong(tempVal));
		}
		
		
	}


	
	/* public void error(SAXParseException ex) throws SAXException {
		     System.out.println("ERROR: [at " + ex.getLineNumber() + "] " + ex + " "+ ex.getMessage());
  }
 public void fatalError(SAXParseException ex) throws SAXException {
    System.out.println("FATAL_ERROR: [at " + ex.getLineNumber() + "] " + ex	+ " "+ ex.getMessage());
  }
  public void warning(SAXParseException ex) throws SAXException {
    System.out.println("WARNING: [at " + ex.getLineNumber() + "] " + ex	+ " "+ ex.getMessage());
  }
	*/


	
	public void saveRecord(List<App> myapp, List<Header> myheader,
			List<Footer> myfooter) {
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement prSt = null;
		ResultSet rs1 = null;

		String insertHdr = "INSERT INTO HDR "
				+ "(HId, approvedFor, brandAIAID, company, docFormNumber, documentTitle, effectiveDate,"
				+ " mapperCompany, mapperContact, mapperEmail, mapperPhone, mapperPhoneExt, pcdbVersionDate,"
				+ " qdbVersionDate, senderName, senderPhone, senderPhoneExt, submissionType, transferDate,"
				+ " vcdbVersionDate) VALUES (hdr_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
				+ " ?, ?, ?, ?, ?, ?)";

		String insertFtr = "INSERT INTO FTR " 
				+ "(FId,R_Count) VALUES"
				+ "(ftr_sequence.NEXTVAL,?)";
		
	
		
		//=============================================================================
		String insertApp = "INSERT INTO App "
			+ "(APID, action, id, ref, aValidate, aspirationId , assetAction,"
			+ " assetId, assetRef, assetValidate, assetItemOrder, assetItemRef, assetItemName,"
			+ " baseVehicleId, bedLengthId, bedTypeId, bodyNumDoorsId, bodyTypeId, brakeABSId,"
			+ " brakeSystemId, cylinderHeadTypeId, displayOrder, driveTypeId,"
			+ " engineBaseId, engineDesignationId, engineMfrId, engineVersionId,"
			+ " engineVINId, frontBrakeTypeId, frontSpringTypeId, fuelDeliverySubTypeId,"
			+ " fuelDeliveryTypeId, fuelSystemControlTypeId, fuelSystemDesignId, fuelTypeId,"
			+ " ignitionSystemTypeId, makeId, mfrLabel, mfrBodyCodeId,"
			+ " modelId, note, noteId, noteLang, part,"
			+ " partBrandAAIAId, partTypeId, positionId, powerOutputId, qualId,"
			+ " qParamUom, qParamValue, qParamAltValue, qParamAltUom, qPText, qty, rearBrakeTypeId,"
			+ " rearSpringTypeId, regionId, steeringTypeId, steeringSystemId, subModelId,"
			+ " transElecContolledId, transmissionMfrId, transmissionMfrCodeId,"
			+ " transmissionBaseId, transmissionControlTypeId, transmissionNumSpeedsId,"
			+ " transmissionTypeId, valvesPerEngineId, vehicleTypeId, wheelBaseId,"
			+ " yearsFrom, yearsTo, headerId,footerId ) VALUES (app_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
			+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
			+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)";
		//============================================================================

		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			System.out.println("Loding Driver Class");
			// step2 create the connection object
			con = DriverManager.getConnection(
					"jdbc:oracle:thin:@192.168.2.68:1521:orcl", "test", "test");
			System.out.println("Connection created");
			// step3 create the statement object

			/*
			 * String query1 =
			 * "CREATE SEQUENCE ftr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query2 =
			 * "CREATE SEQUENCE hdr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query3 =
			 * "CREATE SEQUENCE app_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * prSt = con.prepareStatement(query1); 
			 * prSt = con.prepareStatement(query2); 
			 * prSt = con.prepareStatement(query3); 
			 * prSt.executeQuery(); 
			 * System.out.println("Creating Sequence");
			 */

			/*
			 * String query1 =
			 * "CREATE TABLE FTR(FID INT NOT NULL, R_COUNT INT, PRIMARY KEY (fID))";
			 * prSt = con.prepareStatement(query1);
			 * prSt.executeQuery();
			 * System.out.println("Footer Table created");
			 */

			/*
			 * String query2 =  "CREATE TABLE HDR(HID INT NOT NULL, approvedFor varchar(10)," 
			 * + brandAIAID varchar(10), company varchar(30), docFormNumber varchar(10),"
			 * + documentTitle varchar(30), effectiveDate varchar(30),  mapperCompany varchar(50),"
			 * + mapperContact varchar(30), mapperEmail varchar(30), mapperPhone varchar(20),"
			 * + mapperPhoneExt varchar(10), pcdbVersionDate varchar(30), qdbVersionDate varchar(30),"
			 * + senderName varchar(30), senderPhone varchar(20), senderPhoneExt varchar(10),"
			 * + submissionType varchar(10), transferDate varchar(30), vcdbVersionDate varchar(30), PRIMARY KEY (HID))"; 
			 * prSt = con.prepareStatement(query2);
			 * prSt.executeQuery();
			 * System.out.println("Header Table created");
			 */
/*
			
			  String query3 = "CREATE TABLE App(APID number NOT NULL, action varchar(5), id number, ref varchar(30)," +
			  		" aValidate varchar(10) DEFAULT 'Yes', aspirationId number, assetAction varchar(10),  assetId number," +
			  		" assetRef varchar(10), assetValidate varchar(10) DEFAULT 'Yes', assetItemOrder number," +
			  		" assetItemRef varchar(10), assetItemName varchar(20), baseVehicleId number," +
			  		" bedLengthId number, bedTypeId number, bodyNumDoorsId number, bodyTypeId number, brakeABSId number," +
			  		" brakeSystemId number, cylinderHeadTypeId number, displayOrder number, driveTypeId number," +
			  		" engineBaseId number, engineDesignationId number, engineMfrId number, engineVersionId number," +
			  		" engineVINId number, frontBrakeTypeId number, frontSpringTypeId number, fuelDeliverySubTypeId number," +
			  		" fuelDeliveryTypeId number, fuelSystemControlTypeId number, fuelSystemDesignId number, fuelTypeId number," +
			  		" ignitionSystemTypeId number, makeId number, mfrLabel varchar(30), mfrBodyCodeId number," +
			  		" modelId number, note varchar(200), noteId number, noteLang varchar(10), part varchar(30)," +
			  		" partBrandAAIAId varchar(30), partTypeId number, positionId number, powerOutputId number, qualId number," +
			  		" qParamUom varchar(20), qParamValue varchar(50), qParamAltValue varchar(20), qParamAltUom varchar(50), qPText varchar(20), qty number, rearBrakeTypeId number," +
			  		" rearSpringTypeId number, regionId number, steeringTypeId number, steeringSystemId number, subModelId number," +
			  		" transElecContolledId number, transmissionMfrId number, transmissionMfrCodeId number," +
			  		" transmissionBaseId number, transmissionControlTypeId number, transmissionNumSpeedsId number," +
			  		" transmissionTypeId number, valvesPerEngineId number, vehicleTypeId number, wheelBaseId number," +
			  		" yearsFrom varchar(10), yearsTo varchar(10), headerId number, footerId number," +
			  		" PRIMARY KEY (APID))";
			  prSt = con.prepareStatement(query3);
			  prSt.executeQuery();
			 System.out.println("App Table created");
			
			*/
			prSt = con.prepareStatement(insertFtr); 
			prSt.setLong(1,(tempFooter.getRecordCount()));
			prSt.execute();
			System.out.println("Record added in Footer");
			
			prSt = con.prepareStatement(insertHdr); 
			{
			prSt.setString(1,(tempHeader.getApprovedFor()));
			prSt.setString(2,(tempHeader.getBrandAAIAID())); 
			prSt.setString(3,(tempHeader.getCompany())); 
			prSt.setString(4,(tempHeader.getDocFormNumber())); 
			prSt.setString(5,(tempHeader.getDocumentTitle())); 
			prSt.setString(6,(tempHeader.getEffectiveDate())); 
			prSt.setString(7,(tempHeader.getMapperCompany())); 
			prSt.setString(8,(tempHeader.getMapperContact())); 
			prSt.setString(9,(tempHeader.getMapperEmail())); 
			prSt.setString(10,(tempHeader.getMapperPhone())); 
			prSt.setString(11,(tempHeader.getMapperPhoneExt())); 
			prSt.setString(12,(tempHeader.getPcdbVersionDate())); 
			prSt.setString(13,(tempHeader.getQdbVersionDate())); 
			prSt.setString(14,(tempHeader.getSenderName())); 
			prSt.setString(15,(tempHeader.getSenderPhone())); 
			prSt.setString(16,(tempHeader.getSenderPhoneExt())); 
			prSt.setString(17,(tempHeader.getSubmissionType())); 
			prSt.setString(18,(tempHeader.getTransferDate())); 
			prSt.setString(19,(tempHeader.getVcdbVersionDate())); 
			prSt.addBatch();
			}
			prSt.executeBatch();
			System.out.println("Record added in Header");
			
			int s = 0;
			int head = 0;
			int s1 = 0;
			int foot = 0;
			rs = con.createStatement().executeQuery("select MAX(HId) from HDR");
			if (rs != null) {
				while (rs.next()) {
					head = rs.getInt(1);
				}
			}
			System.out.println("Header Id = " + head);
			s = head;
			rs1 = con.createStatement()
					.executeQuery("select MAX(FID) from FTR");
			if (rs1 != null) {
				while (rs1.next()) {
					foot = rs1.getInt(1);
				}
			}
			int x=0;
			s1 = foot;
			int insert =0;
			int duplicate = 0;
			Statement stmt = con.createStatement();
			// int s1 = stmt.executeUpdate();
			System.out.println("Footer Id = " + s1);
			Iterator<App> i = myApps.iterator();

			while (i.hasNext()) {
				App ap = (App)i.next();
				
				String storeSql = "SELECT action, id, ref, aValidate, aspirationId , assetAction,"
					+ " assetId, assetRef, assetValidate, assetItemOrder, assetItemRef, assetItemName,"
					+ " baseVehicleId, bedLengthId, bedTypeId, bodyNumDoorsId, bodyTypeId, brakeABSId,"
					+ " brakeSystemId, cylinderHeadTypeId, displayOrder, driveTypeId,"
					+ " engineBaseId, engineDesignationId, engineMfrId, engineVersionId,"
					+ " engineVINId, frontBrakeTypeId, frontSpringTypeId, fuelDeliverySubTypeId,"
					+ " fuelDeliveryTypeId, fuelSystemControlTypeId, fuelSystemDesignId, fuelTypeId,"
					+ " ignitionSystemTypeId, makeId, mfrLabel, mfrBodyCodeId,"
					+ " modelId, note, noteId, noteLang, part, partBrandAAIAId, partTypeId, positionId, powerOutputId, qualId,"
					+ " qParamUom, qParamValue, qParamAltValue, qParamAltUom, qPText, qty, rearBrakeTypeId,"
					+ " rearSpringTypeId, regionId, steeringTypeId, steeringSystemId, subModelId,"
					+ " transElecContolledId, transmissionMfrId, transmissionMfrCodeId,"
					+ " transmissionBaseId, transmissionControlTypeId, transmissionNumSpeedsId,"
					+ " transmissionTypeId, valvesPerEngineId, vehicleTypeId, wheelBaseId,"
					+ " yearsFrom, yearsTo From App where ";
				if(ap.getAction() != null)
					 storeSql +=" action = '"+ap.getAction()+"'";
				if(ap.getId() != 0)
					 storeSql +=" and id = "+ap.getId();
				if(ap.getRef() != null)
					 storeSql +=" and ref = '"+ap.getRef()+"'";
				if(ap.getValidate() != null)
					 storeSql +=" and aValidate = '"+ap.getValidate()+"'";
				if(ap.getAspirationId() != 0)
					 storeSql +=" and aspirationId = "+ap.getAspirationId();
				if(ap.getAssetAction() != null)
					 storeSql +=" and assetAction = '"+ap.getAssetAction()+"'";
				if(ap.getAssetId() != 0)
					 storeSql +=" and assetId = "+ap.getAssetId();
				if(ap.getAssetRef() != null)
					 storeSql +=" and assetRef = '"+ap.getAssetRef()+"'";
				if(ap.getAssetValidate() != null)
					 storeSql +=" and assetValidate = '"+ap.getAssetValidate()+"'";
				if(ap.getAssetItemOrder() != 0)
					 storeSql +=" and assetItemOrder = "+ap.getAssetItemOrder();
				if(ap.getAssetItemRef() != null)
					 storeSql +=" and assetItemRef = '"+ap.getAssetItemRef()+"'";
				if(ap.getAssetItemName() != null)
					 storeSql +=" and assetItemName = '"+ap.getAssetItemName()+"'";
				if(ap.getBaseVehicleId() != 0)
					 storeSql +=" and baseVehicleId = "+ap.getBaseVehicleId();
				if(ap.getBedLengthId() != 0)
					 storeSql +=" and bedLengthId = "+ap.getBedLengthId();
				if(ap.getBedTypeId() != 0)
					 storeSql +=" and bedTypeId = "+ap.getBedTypeId();
				if(ap.getBodyNumDoorsId() != 0)
					 storeSql +=" and bodyNumDoorsId = "+ap.getBodyNumDoorsId();
				if(ap.getBodyTypeId() != 0)
					 storeSql +=" and bodyTypeId = "+ap.getBodyTypeId();
				if(ap.getBrakeABSId() != 0)
					 storeSql +=" and brakeABSId = "+ap.getBrakeABSId();
				if(ap.getBrakeSystemId() != 0)
					 storeSql +=" and brakeSystemId = "+ap.getBrakeSystemId();
				if(ap.getCylinderHeadTypeId() != 0)
					 storeSql +=" and cylinderHeadTypeId = "+ap.getCylinderHeadTypeId();
				if(ap.getDisplayOrder() != 0)
					 storeSql +=" and displayOrder = "+ap.getDisplayOrder();
				if(ap.getDriveTypeId() != 0)
					 storeSql +=" and driveTypeId = "+ap.getDriveTypeId();
				if(ap.getEngineBaseId()  != 0)
					 storeSql +=" and engineBaseId = "+ap.getEngineBaseId();
				if(ap.getEngineDesignationId() != 0)
					 storeSql +=" and engineDesignationId = "+ap.getEngineDesignationId();
				if(ap.getEngineMfrId() != 0)
					 storeSql +=" and engineMfrId = "+ap.getEngineMfrId();
				if(ap.getEngineVersionId() != 0)
					 storeSql +=" and engineVersionId = "+ap.getEngineVersionId();
				if(ap.getEngineVINId() != 0)
					 storeSql +=" and engineVINId = "+ap.getEngineVINId();
				if(ap.getFrontBrakeTypeId() != 0)
					 storeSql +=" and frontBrakeTypeId = "+ap.getFrontBrakeTypeId();
				if(ap.getFrontSpringTypeId() != 0)
					 storeSql +=" and frontSpringTypeId = "+ap.getFrontSpringTypeId();
				if(ap.getFuelDeliverySubTypeId() != 0)
					 storeSql +=" and fuelDeliverySubTypeId = "+ap.getFuelDeliverySubTypeId();
				if(ap.getFuelDeliveryTypeId() != 0)
					 storeSql +=" and fuelDeliveryTypeId = "+ap.getFuelDeliveryTypeId();
				if(ap.getFuelSystemControlTypeId() != 0)
					 storeSql +=" and fuelSystemControlTypeId = "+ap.getFuelSystemControlTypeId();
				if(ap.getFuelSystemDesignId() != 0)
					 storeSql +=" and fuelSystemDesignId = "+ap.getFuelSystemDesignId();
				if(ap.getFuelTypeId() != 0)
					 storeSql +=" and fuelTypeId = "+ap.getFuelTypeId();
				if(ap.getIgnitionSystemTypeId() != 0)
					 storeSql +=" and ignitionSystemTypeId = "+ap.getIgnitionSystemTypeId();
				if(ap.getMakeId() != 0)
					 storeSql +=" and makeId = "+ap.getMakeId();
				if(ap.getMfrLabel() != null)
					 storeSql +=" and mfrLabel = '"+ap.getMfrLabel()+"'";
				if(ap.getMfrBodyCodeId() != 0)
					 storeSql +=" and mfrBodyCodeId = "+ap.getMfrBodyCodeId();
				if(ap.getModelId() != 0)
					 storeSql +=" and modelId = "+ap.getModelId();
				if(ap.getNote() != null)
					 storeSql +=" and note = '"+ap.getNote()+"'";
				if(ap.getNoteId() != 0)
					 storeSql +=" and noteId = "+ap.getNoteId();
				if(ap.getNoteLang() != null)
					 storeSql +=" and noteLang = '"+ap.getNoteLang()+"'";
				if(ap.getPart() != null)
					 storeSql +=" and part = '"+ap.getPart()+"'";
				if(ap.getPartBrandAAIAId() != null)
					 storeSql +=" and partBrandAAIAId = '"+ap.getPartBrandAAIAId()+"'";
				if(ap.getPartTypeId() != 0)
					 storeSql +=" and partTypeId = "+ap.getPartTypeId();
				if(ap.getPositionId() != 0)
					 storeSql +=" and positionId = "+ap.getPositionId();
				if(ap.getPowerOutputId() != 0)
					 storeSql +=" and powerOutputId = "+ap.getPowerOutputId();
				if(ap.getQualId() != 0)
					 storeSql +=" and qualId = "+ap.getQualId();
				if(ap.getqParamUom() != null)
					 storeSql +=" and qParamUom = '"+ap.getqParamUom()+"'";
				if(ap.getqParamValue() != null)
					 storeSql +=" and qParamValue = '"+ap.getqParamValue()+"'";
				if(ap.getqParamAltValue() != null)
					 storeSql +=" and qParamAltValue = '"+ap.getqParamAltValue()+"'";
				if(ap.getqParamAltUom() != null)
					 storeSql +=" and qParamAltUom = '"+ap.getqParamAltUom()+"'";
				if(ap.getqPText() != null)
					 storeSql +=" and qPText = '"+ap.getqPText()+"'";
				if(ap.getQty() != 0)
					 storeSql +=" and qty = "+ap.getQty();
				if(ap.getRearBrakeTypeId() != 0)
					 storeSql +=" and rearBrakeTypeId= "+ap.getRearBrakeTypeId();
				if(ap.getRearSpringTypeId() != 0)
					 storeSql +=" and rearSpringTypeId = "+ap.getRearSpringTypeId();
				if(ap.getRegionId() != 0)
					 storeSql +=" and regionId = "+ap.getRegionId();
				if(ap.getSteeringTypeId() != 0)
					 storeSql +=" and steeringTypeId = "+ap.getSteeringTypeId();
				if(ap.getSteeringSystemId() != 0)
					 storeSql +=" and steeringSystemId = "+ap.getSteeringSystemId();
				if(ap.getSubModelId() != 0)
					 storeSql +=" and subModelId = "+ap.getSubModelId();
				if(ap.getTransElecContolledId() != 0)
					 storeSql +=" and transElecContolledId = "+ap.getTransElecContolledId();
				if(ap.getTransmissionMfrId() != 0)
					 storeSql +=" and transmissionMfrId = "+ap.getTransmissionMfrId();
				if(ap.getTransmissionMfrCodeId() != 0)
					 storeSql +=" and transmissionMfrCodeId = "+ap.getTransmissionMfrCodeId();
				if(ap.getTransmissionBaseId() != 0)
					 storeSql +=" and transmissionBaseId = "+ap.getTransmissionBaseId();
				if(ap.getTransmissionControlTypeId() != 0)
					 storeSql +=" and transmissionControlTypeId = "+ap.getTransmissionControlTypeId();
				if(ap.getTransmissionNumSpeedsId() != 0)
					 storeSql +=" and transmissionNumSpeedsId = "+ap.getTransmissionNumSpeedsId();
				if(ap.getTransmissionTypeId() != 0)
					 storeSql +=" and transmissionTypeId = "+ap.getTransmissionTypeId();
				if(ap.getValvesPerEngineId() != 0)
					 storeSql +=" and valvesPerEngineId = "+ap.getValvesPerEngineId();
				if(ap.getVehicleTypeId() != 0)
					 storeSql +=" and vehicleTypeId = "+ap.getVehicleTypeId();
				if(ap.getWheelBaseId() != 0)
					 storeSql +=" and wheelBaseId = "+ap.getWheelBaseId();
				if(ap.getYearsFrom() != null)
					 storeSql +=" and yearsFrom = '"+ap.getYearsFrom()+"'";
				if(ap.getYearsTo() != null)
					 storeSql +=" and yearsTo = '"+ap.getYearsTo()+"'";
				
		  //  System.out.println("==>"+storeSql);
				rs = stmt.executeQuery(storeSql);
				
				//rs = con.prepareStatement(storeSql);
				if(!rs.next())
				{
							
				prSt = con.prepareStatement(insertApp);
				//prSt = con.prepareStatement(storeSql);
				prSt.setString(1, (ap.getAction()));
				prSt.setLong(2, (ap.getId()));
				prSt.setString(3, (ap.getRef()));
				prSt.setString(4, (ap.getValidate()));
				prSt.setLong(5, (ap.getAspirationId()));
				prSt.setString(6, (ap.getAssetAction()));
				prSt.setLong(7, (ap.getAssetId()));
				prSt.setString(8, (ap.getAssetRef()));
				prSt.setString(9, (ap.getAssetValidate()));
				prSt.setLong(10, (ap.getAssetItemOrder()));
				prSt.setString(11, (ap.getAssetItemRef()));
				prSt.setString(12, (ap.getAssetItemName()));
				prSt.setLong(13, (ap.getBaseVehicleId()));
				prSt.setLong(14, (ap.getBedLengthId()));
				prSt.setLong(15, (ap.getBedTypeId()));
				prSt.setLong(16, (ap.getBodyNumDoorsId()));
				prSt.setLong(17, (ap.getBodyTypeId()));
				prSt.setLong(18, (ap.getBrakeABSId()));
				prSt.setLong(19, (ap.getBrakeSystemId()));
				prSt.setLong(20, (ap.getCylinderHeadTypeId()));
				prSt.setLong(21, (ap.getDisplayOrder()));
				prSt.setLong(22, (ap.getDriveTypeId()));
				prSt.setLong(23, (ap.getEngineBaseId()));
				prSt.setLong(24, (ap.getEngineDesignationId()));
				prSt.setLong(25, (ap.getEngineMfrId()));
				prSt.setLong(26, (ap.getEngineVersionId()));
				prSt.setLong(27, (ap.getEngineVINId()));
				prSt.setLong(28, (ap.getFrontBrakeTypeId()));
				prSt.setLong(29, (ap.getFrontSpringTypeId()));
				prSt.setLong(30, (ap.getFuelDeliverySubTypeId()));
				prSt.setLong(31, (ap.getFuelDeliveryTypeId()));
				prSt.setLong(32, (ap.getFuelSystemControlTypeId()));
				prSt.setLong(33, (ap.getFuelSystemDesignId()));
				prSt.setLong(34, (ap.getFuelTypeId()));
				prSt.setLong(35, (ap.getIgnitionSystemTypeId()));
				prSt.setLong(36, (ap.getMakeId()));
				prSt.setString(37, (ap.getMfrLabel()));
				prSt.setLong(38, (ap.getMfrBodyCodeId()));
				prSt.setLong(39, (ap.getModelId()));
				prSt.setString(40, (ap.getNote()));
				prSt.setLong(41, (ap.getNoteId()));
				prSt.setString(42, (ap.getNoteLang()));
				prSt.setString(43, (ap.getPart()));
				prSt.setString(44, (ap.getPartBrandAAIAId()));
				prSt.setLong(45, (ap.getPartTypeId()));
				prSt.setLong(46, (ap.getPositionId()));
				prSt.setLong(47, (ap.getPowerOutputId()));
				prSt.setLong(48, (ap.getQualId()));
				prSt.setString(49, (ap.getqParamUom()));
				prSt.setString(50, (ap.getqParamValue()));
				prSt.setString(51, (ap.getqParamAltValue()));
				prSt.setString(52, (ap.getqParamAltUom()));
				prSt.setString(53, (ap.getqPText()));
				prSt.setLong(54, (ap.getQty()));
				prSt.setLong(55, (ap.getRearBrakeTypeId()));
				prSt.setLong(56, (ap.getRearSpringTypeId()));
				prSt.setLong(57, (ap.getRegionId()));
				prSt.setLong(58, (ap.getSteeringTypeId()));
				prSt.setLong(59, (ap.getSteeringSystemId()));
				prSt.setLong(60, (ap.getSubModelId()));
				prSt.setLong(61, (ap.getTransElecContolledId()));
				prSt.setLong(62, (ap.getTransmissionMfrId()));
				prSt.setLong(63, (ap.getTransmissionMfrCodeId()));
				prSt.setLong(64, (ap.getTransmissionBaseId()));
				prSt.setLong(65, (ap.getTransmissionControlTypeId()));
				prSt.setLong(66, (ap.getTransmissionNumSpeedsId()));
				prSt.setLong(67, (ap.getTransmissionTypeId()));
				prSt.setLong(68, (ap.getValvesPerEngineId()));
				prSt.setLong(69, (ap.getVehicleTypeId()));
				prSt.setLong(70, (ap.getWheelBaseId()));
				prSt.setString(71, (ap.getYearsFrom()));
				prSt.setString(72, (ap.getYearsTo()));
				prSt.setLong(73, head);
				prSt.setLong(74, foot);
				prSt.addBatch();
				prSt.executeBatch();
				out.println(ap.getId());
				prSt.close();
				insert++;
				System.out.println("Insert Record " +insert);
				}
				else{
					duplicate++;
					System.out.println("Duplicate record " +duplicate);
				
				}
			}
			//prSt.executeBatch();
			//prSt.close();
			System.out.println("Record added in App");
		
			con.commit();
			rs.close();
			prSt.close();
			System.out.println("Commited");
		} catch (Exception e) {
			System.out.println(e);
			e.printStackTrace();
			out.println(e);
		}
	}
	
	/*
	public void warning(SAXParseException exception)
    throws SAXException {

    try {
        FileWriter fw = new FileWriter("error.log");
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write("Warning: " + exception.getMessage( ) + "\n");
        bw.flush( );
        bw.close( );
        fw.close( );
    } catch (IOException e) {
        throw new SAXException("Could not write to log file", e);
    }*/
//}
	
public static void main(String[] args) {
		long startTime = System.nanoTime();
		ShiftHandler sh = new ShiftHandler();
		sh.runExample();
		long endTime = System.nanoTime();
		System.out.println("Took "+(endTime - startTime) + " ns");
	}

}
